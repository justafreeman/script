Primeira Semana: JavaScript Básico

Dia 1 - Terça-feira: Introdução ao JavaScript
   - Introdução à linguagem de programação JavaScript e seu papel no desenvolvimento web.
   - Declaração de variáveis com `var`, `let` e `const`.
   - Tipos de dados em JavaScript: números, strings, booleanos, arrays, objetos, null e undefined.

   Exemplos Práticos:
   ```javascript
   // Declaração de variáveis
   var idade = 25;
   let nome = "Maria";
   const PI = 3.14;

   // Tipos de dados
   let numero = 42;
   let texto = "Olá, mundo!";
   let estaChovendo = true;
   let listaNumeros = [1, 2, 3, 4, 5];
   let pessoa = { nome: "João", idade: 25 };
   let valorNulo = null;
   let valorIndefinido;
   ```

Dia 2 - Quarta-feira: Funções em JavaScript e Escopo de Variáveis
   - Criação e chamada de funções em JavaScript.
   - Escopo global e local de variáveis.
   - Parâmetros e argumentos de função.

   Exemplos Práticos:
   ```javascript
   // Definindo uma função
   function saudacao(nome) {
     console.log(`Olá, ${nome}!`);
   }

   // Chamando a função com argumentos
   saudacao("Maria"); // Saída: "Olá, Maria!"

   // Exemplo de escopo global e local
   let numeroGlobal = 10;

   function somarNumeros(numero1, numero2) {
     let resultado = numero1 + numero2;
     console.log(`Resultado da soma local: ${resultado}`);
     console.log(`Variável global dentro da função: ${numeroGlobal}`);
   }

   somarNumeros(5, 7);
   console.log(`Variável global fora da função: ${numeroGlobal}`);
   ```

Dia 3 - Quinta-feira: Estruturas de Controle (if, else, loops) e Arrays
   - Estruturas condicionais `if`, `else if` e `else` para tomar decisões.
   - Loops `for`, `while` e `do...while` para executar blocos de código repetidamente.
   - Trabalhando com arrays e seus métodos.

   Exemplos Práticos:
   ```javascript
   // Estruturas condicionais
   let idade = 18;

   if (idade < 18) {
     console.log("Você é menor de idade.");
   } else if (idade === 18) {
     console.log("Você tem 18 anos.");
   } else {
     console.log("Você é maior de idade.");
   }

   // Loops
   for (let i = 1; i <= 5; i++) {
     console.log(i);
   }

   let contador = 1;
   while (contador <= 5) {
     console.log(contador);
     contador++;
   }

   let contador = 1;
   do {
     console.log(contador);
     contador++;
   } while (contador <= 5);

   // Trabalhando com arrays
   let frutas = ["maçã", "banana", "laranja"];

   for (let i = 0; i < frutas.length; i++) {
     console.log(frutas[i]);
   }

   // Métodos de arrays
   frutas.push("morango"); // Adicionar um elemento no final do array
   frutas.pop(); // Remover o último elemento do array
   frutas.splice(1, 1); // Remover um elemento em uma posição específica
   ```

Dia 4 - Sexta-feira: Manipulação do DOM e Eventos em JavaScript
   - Selecionando elementos do DOM usando `querySelector` e `querySelectorAll`.
   - Modificando conteúdo e estilos do DOM usando JavaScript.
   - Adicionando e removendo elementos dinamicamente.
   - Trabalhando com eventos e manipuladores de eventos.

   Exemplos Práticos:
   ```html
   <!-- HTML -->
   <div id="conteudo">
     <p>Este é um parágrafo.</p>
   </div>
   ```

   ```javascript
   // Selecionando elementos do DOM
   const conteudoDiv = document.querySelector("#conteudo");
   const paragrafo = conteudoDiv.querySelector("p");

   // Modificando conteúdo do DOM
   paragrafo.textContent = "Texto modificado dinamicamente.";

   // Modificando estilos do DOM
   paragrafo.style.color = "blue";
   paragrafo.style.fontSize = "20px";

   // Adicionando elementos ao DOM
   const novoParagrafo = document.createElement("p");
   novoParagrafo.textContent = "Novo parágrafo adicionado.";
   conteudoDiv.appendChild(novoParagrafo);

   // Removendo elementos do DOM
   conteudoDiv.removeChild(paragrafo);

   // Manipulando eventos
   const botao = document.querySelector("#meuBotao");
   botao.addEventListener("click", () => {
     console.log("Botão clicado!");
   });
   ```

Dia 5 - Sábado: Introdução a Objetos em JavaScript
   - Criando objetos e suas propriedades.
   - Métodos de objeto para executar ações.
   - Encapsulamento e abstração de dados


Claro! Abaixo estão 25 exercícios de fixação em JavaScript para você praticar. Tente resolver cada um deles e depois confira as respostas para verificar seu progresso.

Exercícios de Fixação - Semana 1

1. Crie uma variável chamada `nome` e atribua a ela o valor "João".

2. Crie uma função chamada `saudacao` que receba o nome de uma pessoa como parâmetro e retorne uma saudação personalizada. Exemplo: "Olá, Maria!".

3. Crie um array chamado `numeros` com os valores 1, 2, 3, 4, 5.

4. Escreva um loop que exiba os números de 1 a 10 no console.

5. Crie uma função chamada `somarNumeros` que receba dois números como parâmetros e retorne a soma deles.

6. Escreva uma estrutura condicional que verifique se um número é positivo, negativo ou zero.

7. Crie um array com os nomes de três frutas.

8. Adicione uma nova fruta ao array criado no exercício anterior.

9. Remova a última fruta do array criado no exercício 7.

10. Crie uma função que receba um número como parâmetro e retorne o seu dobro.

11. Escreva um loop que exiba os números pares de 1 a 10 no console.

12. Crie uma função que verifique se um número é primo.

13. Escreva uma função que receba um array como parâmetro e retorne a quantidade de elementos nele.

14. Crie um objeto chamado `pessoa` com as propriedades `nome` e `idade`.

15. Modifique o valor da propriedade `idade` do objeto criado no exercício 14.

16. Adicione um método chamado `falar` ao objeto criado no exercício 14, que exiba uma mensagem no console.

17. Crie uma função que receba uma string como parâmetro e retorne a string invertida.

18. Escreva um loop que exiba os números de 10 a 1 no console.

19. Crie um array com números aleatórios e ordene-o em ordem crescente.

20. Crie uma função que receba um array de números como parâmetro e retorne a média deles.

21. Escreva uma função que receba um número como parâmetro e retorne se ele é par ou ímpar.

22. Crie uma função que receba um array como parâmetro e retorne o menor número contido nele.

23. Escreva uma estrutura condicional que verifique se um ano é bissexto.

24. Crie um array com o nome de cinco países e exiba-os no console em ordem alfabética.

25. Crie uma função que receba um número como parâmetro e retorne a sequência de Fibonacci até aquele número.

Bons estudos e prática! Caso tenha dúvidas ou queira conferir as respostas, sinta-se à vontade para perguntar.




Segunda Semana: JavaScript Avançado e Introdução ao React

Dia 1 - Terça-feira: Funções de Array (map, filter, reduce)
   - Funções de Array são métodos poderosos que facilitam a manipulação de arrays em JavaScript.
   - O método `map` permite criar um novo array com base em cada elemento do array original.
   - O método `filter` filtra os elementos do array com base em uma condição fornecida.
   - O método `reduce` reduz o array a um único valor, aplicando uma função acumuladora em todos os elementos.

   Exemplos Práticos:
   ```javascript
   // Método map
   const numeros = [1, 2, 3, 4, 5];
   const dobro = numeros.map((numero) => numero * 2);
   console.log(dobro); // Saída: [2, 4, 6, 8, 10]

   // Método filter
   const numeros = [1, 2, 3, 4, 5];
   const pares = numeros.filter((numero) => numero % 2 === 0);
   console.log(pares); // Saída: [2, 4]

   // Método reduce
   const numeros = [1, 2, 3, 4, 5];
   const soma = numeros.reduce((acumulador, numero) => acumulador + numero, 0);
   console.log(soma); // Saída: 15
   ```

Dia 2 - Quarta-feira: Arrow Functions e Promises
   - Arrow Functions são uma sintaxe simplificada para escrever funções em JavaScript.
   - Promises são objetos usados para lidar com operações assíncronas e fornecer um resultado no futuro.
   - O uso de `async/await` facilita a escrita e leitura de código assíncrono.

   Exemplos Práticos:
   ```javascript
   // Arrow Functions
   const somar = (a, b) => a + b;
   console.log(somar(3, 5)); // Saída: 8

   const quadrado = (numero) => numero * numero;
   console.log(quadrado(4)); // Saída: 16

   // Promises
   const promise = new Promise((resolve, reject) => {
     setTimeout(() => {
       resolve("Promessa resolvida!");
     }, 2000);
   });

   promise.then((resultado) => {
     console.log(resultado); // Saída após 2 segundos: "Promessa resolvida!"
   });

   // async/await
   const fazerRequisicao = async () => {
     const response = await fetch("https://api.example.com/data");
     const data = await response.json();
     console.log(data);
   };

   fazerRequisicao();
   ```

Dia 3 - Quinta-feira: Callbacks e AJAX
   - Callbacks são funções que são passadas como argumentos para outras funções e são executadas após a conclusão de uma tarefa.
   - AJAX (Asynchronous JavaScript and XML) é uma técnica que permite realizar requisições assíncronas ao servidor.

   Exemplos Práticos:
   ```javascript
   // Callbacks
   const executarCallback = (callback) => {
     console.log("Executando tarefa...");
     callback();
   };

   executarCallback(() => {
     console.log("Tarefa concluída!");
   });

   // AJAX com XMLHttpRequest
   const xhr = new XMLHttpRequest();
   xhr.open("GET", "https://api.example.com/data");
   xhr.onreadystatechange = function () {
     if (xhr.readyState === 4 && xhr.status === 200) {
       const data = JSON.parse(xhr.responseText);
       console.log(data);
     }
   };
   xhr.send();
   ```

Dia 4 - Sexta-feira: Introdução a ES6+ (let, const, template literals, spread operator)
   - `let` e `const` são alternativas a `var` para declarar variáveis, sendo `const` para valores constantes.
   - Template literals permitem interpolar variáveis em strings usando `${}`.
   - O spread operator (`...`) é usado para copiar arrays, concatenar arrays e copiar objetos.

   Exemplos Práticos:
   ```javascript
   // let e const
   let nome = "Maria";
   const idade = 30;

   // Template literals
   console.log(`Meu nome é ${nome} e tenho ${idade} anos.`);

   // Spread operator em arrays
   const array1 = [1, 2, 3];
   const array2 = [4, 5, 6];
   const arrayConcatenado = [...array1, ...array2];
   console.log(arrayConcatenado); // Saída: [1, 2, 3, 4, 5, 6]

   // Spread operator em objetos
   const pessoa = { nome: "João", idade: 25 };
   const pessoaAtualizada = { ...pessoa, idade: 26 };
   console.log(pessoaAtualizada); // Saída: { nome: "João", idade: 26 }
   ```

Dia 5 - Sábado: Revisão dos Conceitos da Segunda Semana
   - Neste dia, faça uma revisão geral de tudo o que foi estudado durante a segunda semana.
   - Pratique a resolução de exercícios e crie pequenos projetos para aplicar os conhecimentos adquiridos.

Continue praticando e explorando os conceitos aprendidos para fortalecer suas habilidades em JavaScript. A segunda semana é fundamental para avançar no aprendizado e se preparar para os conceitos mais avançados na próxima etapa: React!


Com certeza! Abaixo estão mais 25 exercícios de fixação em JavaScript para você praticar. Tente resolver cada um deles por conta própria e, se precisar de ajuda, sinta-se à vontade para perguntar.

Exercícios de Fixação - Semana 2

1. Crie uma função que receba um array de números como parâmetro e retorne a soma de todos os números pares.

2. Escreva uma função que receba um array de palavras como parâmetro e retorne um novo array contendo apenas as palavras com mais de 5 letras.

3. Crie uma função que receba um objeto com informações de uma pessoa (nome, idade, profissão, etc.) como parâmetro e retorne uma string formatada com essas informações.

4. Escreva uma função que receba um número como parâmetro e retorne se ele é positivo, negativo ou zero, usando uma Promise.

5. Crie uma função que receba uma string como parâmetro e retorne outra string com todas as letras em maiúsculas.

6. Escreva uma função que receba um array de números como parâmetro e retorne um novo array com o quadrado de cada número.

7. Crie uma função que receba um objeto com informações de um produto (nome, preço, quantidade, etc.) como parâmetro e retorne o preço total, considerando a quantidade.

8. Escreva uma função que receba um número como parâmetro e retorne se ele é um número primo ou não, usando uma Promise.

9. Crie uma função que receba um array de strings como parâmetro e retorne um novo array com as strings invertidas.

10. Escreva uma função que receba um objeto com informações de uma pessoa (nome, idade, altura, etc.) como parâmetro e retorne se ela é maior de idade ou não, usando uma Promise.

11. Crie uma função que receba um array de números como parâmetro e retorne a média aritmética deles.

12. Escreva uma função que receba um número como parâmetro e retorne se ele é par ou ímpar, usando uma Promise.

13. Crie uma função que receba um array de números como parâmetro e retorne um novo array com os números ordenados em ordem crescente.

14. Escreva uma função que receba um número como parâmetro e retorne se ele é um número triangular ou não, usando uma Promise. (Um número é triangular se ele pode ser representado como o produto de três números consecutivos.)

15. Crie uma função que receba um array de objetos como parâmetro e retorne um novo array contendo apenas os objetos que possuem uma propriedade específica.

16. Escreva uma função que receba um número como parâmetro e retorne a sequência de Fibonacci até aquele número, usando uma Promise.

17. Crie uma função que receba um array de números como parâmetro e retorne um novo array contendo apenas os números primos.

18. Escreva uma função que receba uma string como parâmetro e retorne outra string com todas as palavras em ordem reversa.

19. Crie uma função que receba um array de números como parâmetro e retorne o maior número contido nele.

20. Escreva uma função que receba um array de objetos como parâmetro e retorne a soma de um atributo específico de todos os objetos.

21. Crie uma função que receba um número como parâmetro e retorne se ele é um número perfeito ou não. (Um número perfeito é aquele cuja soma de seus divisores, exceto ele mesmo, é igual ao próprio número.)

22. Escreva uma função que receba um objeto com informações de um livro (título, autor, ano, etc.) como parâmetro e retorne uma string formatada com essas informações.

23. Crie uma função que receba um array de strings como parâmetro e retorne um novo array contendo apenas as strings que começam com a letra "A".

24. Escreva uma função que receba um número como parâmetro e retorne se ele é um número feliz ou não. (Um número feliz é aquele que, ao ser substituído pela soma dos quadrados de seus dígitos, resulta em 1.)

25. Crie uma função que receba um array de objetos como parâmetro e retorne um novo array contendo apenas os objetos cujo atributo específico possui um determinado valor.

Bons estudos e prática! Lembre-se de tentar resolver cada exercício por conta própria antes de conferir as respostas. Se tiver dúvidas ou quiser verificar as soluções, estou aqui para ajudar.


**Terceira Semana: Introdução ao React**

**Dia 1 - Terça-feira: Introdução ao React**
   - React é uma biblioteca JavaScript para criar interfaces de usuário (UI) reativas e componentizadas.
   - Utiliza o conceito de componentes, que são blocos isolados de código reutilizáveis e autocontidos.
   - Permite a criação de aplicações web interativas e de alto desempenho.

   Exemplos Práticos:
   ```jsx
   // Exemplo de um componente funcional em React
   import React from 'react';

   function MeuComponente() {
     return (
       <div>
         <h1>Hello, React!</h1>
         <p>Bem-vindo ao mundo dos componentes!</p>
       </div>
     );
   }

   // Renderizando o componente na página
   ReactDOM.render(<MeuComponente />, document.getElementById('root'));
   ```

**Dia 2 - Quarta-feira: Props e Componentes Filhos**
   - Props (propriedades) são utilizadas para passar dados de um componente pai para um componente filho.
   - Componentes filhos são componentes aninhados dentro de um componente pai.

   Exemplos Práticos:
   ```jsx
   // Componente Pai
   import React from 'react';
   import Filho from './Filho';

   function Pai() {
     return (
       <div>
         <h1>Componente Pai</h1>
         <Filho nome="João" idade={25} />
       </div>
     );
   }

   // Componente Filho
   import React from 'react';

   function Filho(props) {
     return (
       <div>
         <p>Nome: {props.nome}</p>
         <p>Idade: {props.idade}</p>
       </div>
     );
   }
   ```

**Dia 3 - Quinta-feira: Estado e Eventos**
   - O estado (state) é um objeto especial que representa a estrutura de dados de um componente.
   - Eventos são ações que ocorrem em elementos da interface, como cliques ou mudanças de input.

   Exemplos Práticos:
   ```jsx
   import React, { useState } from 'react';

   function Contador() {
     const [contador, setContador] = useState(0);

     const incrementar = () => {
       setContador(contador + 1);
     };

     return (
       <div>
         <h1>Contador: {contador}</h1>
         <button onClick={incrementar}>Incrementar</button>
       </div>
     );
   }
   ```

**Dia 4 - Sexta-feira: Ciclo de Vida dos Componentes**
   - Os componentes em React passam por diferentes fases durante sua existência, chamado de ciclo de vida.
   - Podemos utilizar métodos específicos para realizar ações em cada fase do ciclo.

   Exemplos Práticos:
   ```jsx
   import React, { Component } from 'react';

   class MeuComponente extends Component {
     constructor(props) {
       super(props);
       this.state = {
         mensagem: 'Olá, mundo!'
       };
     }

     componentDidMount() {
       console.log('Componente foi montado.');
     }

     componentDidUpdate() {
       console.log('Componente foi atualizado.');
     }

     componentWillUnmount() {
       console.log('Componente será desmontado.');
     }

     render() {
       return <h1>{this.state.mensagem}</h1>;
     }
   }
   ```

**Dia 5 - Sábado: Estilização com CSS e Componentes Estilizados**
   - React permite adicionar estilos aos componentes usando CSS normal.
   - Também podemos utilizar bibliotecas como Styled Components para criar componentes estilizados.

   Exemplos Práticos:
   ```jsx
   // Usando CSS normal
   import React from 'react';
   import './MeuComponente.css';

   function MeuComponente() {
     return <div className="meu-componente">Conteúdo do componente</div>;
   }
   ```

   ```jsx
   // Usando Styled Components
   import React from 'react';
   import styled from 'styled-components';

   const MeuComponente = styled.div`
     background-color: #f0f0f0;
     padding: 10px;
     border: 1px solid #ccc;
   `;

   function App() {
     return <MeuComponente>Conteúdo do componente</MeuComponente>;
   }
   ```

Essa é apenas uma introdução ao React, que é uma biblioteca extremamente poderosa e versátil. Com esses conceitos fundamentais, você estará pronto para criar aplicações mais complexas e interativas usando React. Continue praticando e explorando os recursos do React para aprimorar suas habilidades de desenvolvimento front-end!


Claro! Abaixo estão mais 25 exercícios de fixação em React para você praticar. Tente resolver cada um deles por conta própria e, se precisar de ajuda, sinta-se à vontade para perguntar.

**Exercícios de Fixação - Semana 3**

1. Crie um componente que exiba o seu nome e idade.

2. Escreva um componente que receba um número como prop e exiba o dobro desse número.

3. Crie um componente que receba um array de números como prop e exiba a soma de todos eles.

4. Escreva um componente que receba uma string como prop e exiba o número de caracteres dessa string.

5. Crie um componente que receba um objeto com informações de um livro (título, autor, ano, etc.) como prop e exiba essas informações formatadas.

6. Escreva um componente que exiba uma lista não ordenada de nomes.

7. Crie um componente que receba um array de objetos como prop e exiba uma lista de itens, onde cada item contenha informações de um objeto.

8. Escreva um componente que receba um número como prop e exiba se esse número é par ou ímpar.

9. Crie um componente que receba um array de strings como prop e exiba uma lista ordenada de palavras em ordem alfabética.

10. Escreva um componente que receba um número como prop e exiba a sequência de Fibonacci até esse número.

11. Crie um componente que receba um array de números como prop e exiba o maior número contido nele.

12. Escreva um componente que receba um array de objetos como prop e exiba a média de um atributo específico de todos os objetos.

13. Crie um componente que receba um número como prop e exiba se esse número é um número perfeito ou não. (Um número perfeito é aquele cuja soma de seus divisores, exceto ele mesmo, é igual ao próprio número.)

14. Escreva um componente que receba uma string como prop e exiba outra string com todas as palavras em ordem reversa.

15. Crie um componente que receba um número como prop e exiba a tabuada desse número.

16. Escreva um componente que receba um array de números como prop e exiba o segundo menor número contido nele.

17. Crie um componente que receba um array de objetos como prop e exiba o objeto com o maior valor em um atributo específico.

18. Escreva um componente que receba um número como prop e exiba se esse número é um número feliz ou não. (Um número feliz é aquele que, ao ser substituído pela soma dos quadrados de seus dígitos, resulta em 1.)

19. Crie um componente que receba um array de strings como prop e exiba a quantidade de palavras em cada string.

20. Escreva um componente que receba um array de números como prop e exiba o número que aparece com mais frequência no array.

21. Crie um componente que receba um objeto com informações de um filme (título, diretor, ano, etc.) como prop e exiba um cartão com essas informações.

22. Escreva um componente que receba um número como prop e exiba o fatorial desse número.

23. Crie um componente que receba um array de objetos como prop e exiba a soma de todos os valores de um atributo específico dos objetos.

24. Escreva um componente que receba um número como prop e exiba a sequência de Collatz desse número.

25. Crie um componente que receba um array de números como prop e exiba a mediana desse array.

Bons estudos e prática! Lembre-se de tentar resolver cada exercício por conta própria antes de conferir as respostas. Se tiver dúvidas ou quiser verificar as soluções, estou aqui para ajudar.

**Quarta Semana: Gerenciamento de Estado com Redux**

**Dia 1 - Terça-feira: Introdução ao Redux**
   - Redux é uma biblioteca de gerenciamento de estado para aplicações JavaScript, especialmente em React.
   - Centraliza o estado da aplicação em uma única store (armazenamento) global.
   - Utiliza uma arquitetura baseada em ações (actions), redutores (reducers) e store.

   Exemplos Práticos:
   ```javascript
   // Exemplo de uma ação (action) em Redux
   const incrementAction = {
     type: 'INCREMENT',
     payload: 1,
   };

   // Exemplo de um redutor (reducer) em Redux
   const counterReducer = (state = 0, action) => {
     switch (action.type) {
       case 'INCREMENT':
         return state + action.payload;
       case 'DECREMENT':
         return state - action.payload;
       default:
         return state;
     }
   };

   // Exemplo de criação de uma store em Redux
   import { createStore } from 'redux';
   const store = createStore(counterReducer);
   ```

**Dia 2 - Quarta-feira: Actions e Reducers**
   - Actions são objetos que descrevem uma mudança no estado da aplicação.
   - Reducers são funções puras que recebem uma action e o estado atual, retornando o novo estado.

   Exemplos Práticos:
   ```javascript
   // Exemplo de uma action em Redux
   const incrementAction = {
     type: 'INCREMENT',
     payload: 1,
   };

   // Exemplo de um reducer em Redux
   const counterReducer = (state = 0, action) => {
     switch (action.type) {
       case 'INCREMENT':
         return state + action.payload;
       case 'DECREMENT':
         return state - action.payload;
       default:
         return state;
     }
   };
   ```

**Dia 3 - Quinta-feira: Store e Dispatch**
   - A Store é o objeto que mantém o estado da aplicação.
   - Dispatch é um método da Store para enviar uma action e atualizar o estado através dos reducers.

   Exemplos Práticos:
   ```javascript
   import { createStore } from 'redux';

   const counterReducer = (state = 0, action) => {
     switch (action.type) {
       case 'INCREMENT':
         return state + action.payload;
       case 'DECREMENT':
         return state - action.payload;
       default:
         return state;
     }
   };

   const store = createStore(counterReducer);

   // Exemplo de dispatch para enviar uma action
   store.dispatch({ type: 'INCREMENT', payload: 1 });
   ```

**Dia 4 - Sexta-feira: Conexão do Redux com React (react-redux)**
   - O react-redux é uma biblioteca que permite conectar o Redux com aplicações React.
   - Utiliza os componentes Provider e connect para facilitar o acesso à Store e o envio de actions.

   Exemplos Práticos:
   ```jsx
   // Configuração da Store e Provider
   import { createStore } from 'redux';
   import { Provider } from 'react-redux';
   import rootReducer from './reducers';

   const store = createStore(rootReducer);

   ReactDOM.render(
     <Provider store={store}>
       <App />
     </Provider>,
     document.getElementById('root')
   );

   // Exemplo de conexão do Redux com um componente React
   import { connect } from 'react-redux';

   const Counter = ({ count, increment, decrement }) => {
     return (
       <div>
         <h1>Contador: {count}</h1>
         <button onClick={() => increment(1)}>Incrementar</button>
         <button onClick={() => decrement(1)}>Decrementar</button>
       </div>
     );
   };

   const mapStateToProps = (state) => ({
     count: state.counter,
   });

   const mapDispatchToProps = (dispatch) => ({
     increment: (amount) => dispatch({ type: 'INCREMENT', payload: amount }),
     decrement: (amount) => dispatch({ type: 'DECREMENT', payload: amount }),
   });

   export default connect(mapStateToProps, mapDispatchToProps)(Counter);
   ```

**Dia 5 - Sábado: Introdução a Middleware (Redux Thunk)**
   - Middleware são funções intermediárias que podem ser adicionadas entre a action e o reducer.
   - Redux Thunk é um middleware que permite a criação de actions assíncronas.

   Exemplos Práticos:
   ```javascript
   // Exemplo de uma action assíncrona usando Redux Thunk
   const fetchPosts = () => (dispatch) => {
     dispatch({ type: 'FETCH_POSTS_REQUEST' });
     fetch('https://jsonplaceholder.typicode.com/posts')
       .then((response) => response.json())
       .then((data) => {
         dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: data });
       })
       .catch((error) => {
         dispatch({ type: 'FETCH_POSTS_FAILURE', payload: error });
       });
   };
   ```

Com o conhecimento adquirido nesta semana, você poderá criar aplicações React mais complexas, gerenciando o estado da aplicação de forma mais eficiente com o Redux e trabalhando com ações assíncronas usando Redux Thunk. Continue praticando e aprimorando suas habilidades em desenvolvimento web com React e Redux!


Com certeza! Abaixo estão mais 25 exercícios de fixação em React e Redux para você praticar. Tente resolver cada um deles por conta própria e, se precisar de ajuda, sinta-se à vontade para perguntar.

**Exercícios de Fixação - Semana 4**

1. Crie um componente que exiba uma lista de tarefas (strings) recebida como prop.

2. Escreva um componente que receba um array de objetos com informações de livros (título, autor, ano, etc.) como prop e exiba uma lista de cartões com essas informações.

3. Crie um componente que receba um número como prop e exiba um contador que incrementa ou decrementa esse número ao clicar em botões.

4. Escreva um componente que receba um array de números como prop e exiba o menor número contido nele.

5. Crie um componente que exiba uma lista de nomes de países e permita filtrar a lista através de um input.

6. Escreva um componente que receba um número como prop e exiba se esse número é primo ou não.

7. Crie um componente que receba um array de strings como prop e exiba um dropdown (selecionador) com as opções do array.

8. Escreva um componente que receba um número como prop e exiba se esse número é positivo, negativo ou zero.

9. Crie um componente que receba um array de objetos como prop e exiba uma tabela com essas informações.

10. Escreva um componente que receba um número como prop e exiba uma barra de progresso que representa a porcentagem desse número em relação a um valor máximo.

11. Crie um componente que exiba uma lista de posts (títulos e conteúdos) e permita adicionar novos posts através de um formulário.

12. Escreva um componente que receba um array de números como prop e exiba a média desses números.

13. Crie um componente que receba um array de objetos como prop e exiba uma lista de itens, onde cada item contenha informações de um objeto. O usuário pode selecionar um item da lista para exibir mais detalhes.

14. Escreva um componente que receba uma string como prop e exiba outra string com todas as palavras em letras maiúsculas.

15. Crie um componente que exiba uma lista de produtos (nome, preço, etc.) e permita adicionar produtos ao carrinho de compras.

16. Escreva um componente que receba um número como prop e exiba todos os seus divisores.

17. Crie um componente que receba um array de números como prop e exiba uma lista dos números pares contidos no array.

18. Escreva um componente que receba um número como prop e exiba se esse número é um quadrado perfeito ou não.

19. Crie um componente que exiba uma lista de categorias e permita filtrar a lista de acordo com a categoria selecionada.

20. Escreva um componente que receba um array de strings como prop e exiba um botão que, ao ser clicado, mostra uma string aleatória do array.

21. Crie um componente que receba um objeto com informações de um aluno (nome, notas, etc.) como prop e exiba a média do aluno e uma mensagem de aprovação ou reprovação (nota mínima 7).

22. Escreva um componente que receba um número como prop e exiba a tabuada desse número em uma tabela.

23. Crie um componente que receba um array de objetos como prop e exiba a soma de um atributo específico de todos os objetos.

24. Escreva um componente que receba um array de números como prop e exiba a sequência de Collatz para cada número.

25. Crie um componente que receba um número como prop e exiba se esse número é um número feliz ou não.

Bons estudos e prática! Lembre-se de tentar resolver cada exercício por conta própria antes de conferir as respostas. Se tiver dúvidas ou quiser verificar as soluções, estou aqui para ajudar.


**Quinta Semana: Rotas e Navegação com React Router**

**Dia 1 - Terça-feira: Introdução ao React Router**
   - React Router é uma biblioteca que permite a criação de navegação e roteamento em aplicações React.
   - Permite criar URLs amigáveis e navegar entre diferentes componentes de forma declarativa.
   - Utiliza os componentes `BrowserRouter`, `Route`, `Link`, `Switch`, entre outros.

   Exemplo Prático:
   ```jsx
   // Instalação do React Router: npm install react-router-dom
   import { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';

   const App = () => {
     return (
       <Router>
         <nav>
           <ul>
             <li>
               <Link to="/">Home</Link>
             </li>
             <li>
               <Link to="/about">About</Link>
             </li>
             <li>
               <Link to="/contact">Contact</Link>
             </li>
           </ul>
         </nav>

         <Switch>
           <Route exact path="/" component={Home} />
           <Route path="/about" component={About} />
           <Route path="/contact" component={Contact} />
           <Route component={NotFound} />
         </Switch>
       </Router>
     );
   };
   ```

**Dia 2 - Quarta-feira: Parâmetros de Rota**
   - React Router permite a passagem de parâmetros para as rotas através da URL.
   - Os parâmetros são acessados nos componentes através do objeto `match.params`.

   Exemplo Prático:
   ```jsx
   // Rota com parâmetro
   <Route path="/user/:id" component={UserDetail} />

   // Componente UserDetail acessando o parâmetro
   const UserDetail = ({ match }) => {
     const { id } = match.params;
     return <div>Detalhes do usuário {id}</div>;
   };
   ```

**Dia 3 - Quinta-feira: Redirecionamento e Navegação Programática**
   - React Router permite redirecionar o usuário para outra rota através do componente `Redirect`.
   - Navegação programática é quando o redirecionamento é feito através de código JavaScript, utilizando o objeto `history`.

   Exemplo Prático:
   ```jsx
   // Redirecionamento com Redirect
   <Route path="/old-route">
     <Redirect to="/new-route" />
   </Route>

   // Navegação programática
   import { useHistory } from 'react-router-dom';

   const MyComponent = () => {
     const history = useHistory();

     const handleButtonClick = () => {
       history.push('/new-route');
     };

     return <button onClick={handleButtonClick}>Ir para Nova Rota</button>;
   };
   ```

**Dia 4 - Sexta-feira: Aninhamento de Rotas**
   - React Router permite aninhar rotas para criar layouts mais complexos.
   - Isso é útil quando se tem componentes que compartilham determinado layout.

   Exemplo Prático:
   ```jsx
   // Aninhamento de rotas
   <Router>
     <Switch>
       <Route exact path="/" component={Home} />
       <Route path="/dashboard" component={DashboardLayout} />
     </Switch>
   </Router>

   // Componente DashboardLayout com rotas aninhadas
   const DashboardLayout = () => {
     return (
       <div>
         <h2>Dashboard</h2>
         <nav>
           <ul>
             <li>
               <Link to="/dashboard/users">Usuários</Link>
             </li>
             <li>
               <Link to="/dashboard/products">Produtos</Link>
             </li>
           </ul>
         </nav>
         <Switch>
           <Route path="/dashboard/users" component={Users} />
           <Route path="/dashboard/products" component={Products} />
         </Switch>
       </div>
     );
   };
   ```

**Dia 5 - Sábado: Proteção de Rotas**
   - Em aplicações com autenticação, é comum proteger rotas para usuários autenticados.
   - React Router permite criar rotas privadas que só podem ser acessadas se o usuário estiver autenticado.

   Exemplo Prático:
   ```jsx
   // Componente PrivateRoute para proteção de rotas
   import { Route, Redirect } from 'react-router-dom';

   const PrivateRoute = ({ component: Component, isAuthenticated, ...rest }) => {
     return (
       <Route
         {...rest}
         render={(props) =>
           isAuthenticated ? <Component {...props} /> : <Redirect to="/login" />
         }
       />
     );
   };

   // Uso da rota protegida
   <PrivateRoute
     path="/dashboard"
     component={Dashboard}
     isAuthenticated={user.isAuthenticated}
   />
   ```

Com o conhecimento adquirido nesta semana, você será capaz de criar uma navegação avançada em suas aplicações React, lidando com parâmetros de rota, redirecionamentos, aninhamento de rotas e proteção de rotas. Isso proporcionará uma experiência de usuário mais fluida e organizada. Continue praticando e aprimorando suas habilidades com React Router!

Claro! Abaixo estão mais 25 exercícios de fixação em React Router para você praticar. Tente resolver cada um deles por conta própria e, se precisar de ajuda, sinta-se à vontade para perguntar.

**Exercícios de Fixação - Semana 5**

1. Crie uma aplicação com três rotas: Home, Sobre e Contato.

2. Escreva um componente que exiba o conteúdo de uma página não encontrada (404) quando uma rota inválida for acessada.

3. Crie uma aplicação com rotas protegidas. Um usuário só pode acessar uma rota protegida se estiver autenticado.

4. Escreva um componente que receba um parâmetro pela URL e exiba o seu valor em uma página.

5. Crie uma rota que redirecione o usuário para a página de login caso ele tente acessar uma rota protegida sem estar autenticado.

6. Escreva um componente que exiba uma lista de produtos e permita filtrar a lista de acordo com a categoria selecionada.

7. Crie uma aplicação que utilize o aninhamento de rotas para criar um layout com um cabeçalho fixo em todas as páginas.

8. Escreva um componente que utilize a navegação programática para redirecionar o usuário para outra página ao clicar em um botão.

9. Crie uma aplicação com rotas aninhadas para exibir detalhes de um produto quando o usuário clicar em um item da lista de produtos.

10. Escreva um componente que exiba uma lista de posts e permita ordenar a lista por data, título, etc.

11. Crie uma rota que exiba uma mensagem de boas-vindas ao usuário quando ele fizer login.

12. Escreva um componente que utilize o Redirect para redirecionar o usuário para uma página de agradecimento após o envio de um formulário.

13. Crie uma aplicação com rotas protegidas e um formulário de login. Após o login, o usuário deve ser redirecionado para a rota protegida.

14. Escreva um componente que receba um array de objetos com informações de produtos e exiba uma lista desses produtos.

15. Crie uma rota que exiba um modal com informações adicionais de um produto quando o usuário clicar em um botão.

16. Escreva um componente que exiba uma lista de categorias e permita filtrar a lista de produtos de acordo com a categoria selecionada.

17. Crie uma aplicação que utilize o Redirect para redirecionar o usuário para uma página de erro caso ocorra algum erro no carregamento de um componente.

18. Escreva um componente que receba um número como prop e exiba uma mensagem diferente de acordo com o valor do número (positivo, negativo ou zero).

19. Crie uma rota que redirecione o usuário para a página de login caso ele tente acessar uma rota protegida sem estar autenticado.

20. Escreva um componente que utilize a navegação programática para redirecionar o usuário para outra página ao clicar em um botão.

21. Crie uma aplicação com rotas aninhadas para exibir detalhes de um produto quando o usuário clicar em um item da lista de produtos.

22. Escreva um componente que exiba uma lista de posts e permita ordenar a lista por data, título, etc.

23. Crie uma rota que exiba uma mensagem de boas-vindas ao usuário quando ele fizer login.

24. Escreva um componente que utilize o Redirect para redirecionar o usuário para uma página de agradecimento após o envio de um formulário.

25. Crie uma aplicação com rotas protegidas e um formulário de login. Após o login, o usuário deve ser redirecionado para a rota protegida.

Bons estudos e prática! Lembre-se de tentar resolver cada exercício por conta própria antes de conferir as respostas. Se tiver dúvidas ou quiser verificar as soluções, estou aqui para ajudar.


